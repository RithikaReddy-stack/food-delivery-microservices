package com.food.orderservice.security;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.List;

@Component
@RequiredArgsConstructor
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtTokenUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
        throws ServletException, IOException {

        String authHeader = request.getHeader("Authorization");

        if (StringUtils.hasText(authHeader) && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);

            if (jwtUtil.validateToken(token)) {
                String email = jwtUtil.getEmail(token);

                // ✅ Create auth token with roles
                var authToken = new UsernamePasswordAuthenticationToken(
                        email,
                        null,
                        List.of(new SimpleGrantedAuthority("ROLE_CUSTOMER"))
                );
                
                System.out.println("Token: " + token);
                System.out.println("Email: " + email);
               
                System.out.println("Auth set: " + SecurityContextHolder.getContext().getAuthentication());

                // ✅ Set request-specific details (important!)
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                // ✅ Set into SecurityContext
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        
        

        filterChain.doFilter(request, response);
        
        
    }
}
